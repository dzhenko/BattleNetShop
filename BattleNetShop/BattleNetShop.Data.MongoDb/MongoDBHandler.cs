namespace BattleNetShop.Data.MongoDb
{
    using System;
    using System.Collections.Generic;

    using MongoDB.Driver;

    using BattleNetShop.Model;

    public class MongoDBHandler
    {
        private Lazy<MongoDatabase> database = new Lazy<MongoDatabase>();

        // Task 1 input
        public ICollection<Product> ReadAllProducts()
        {
            //var db = this.GetConnection();

            //var products = db.Prodcuts.ToList();

            //return products;

            return null;
        }

        // Tuple<string, ICollection<Tuple<int, string, string, int, decimal>> will become a class
        // Task 5 output
        public void SaveAllReports(ICollection<Tuple<int, string, string, int, decimal>> allReports)
        {
            //var db = this.GetConnection();

            foreach (var report in allReports)
            {
                
            }
        }

        // Since you need to read some reports, they have to be generated first.
        // Data can be generated by private class or by hand or however you decide. Best way is to use the 
        // library required by the teamwork specification
        public void SeedData()
        {
            //var db = this.GetConnection();

            // db.Products.AddRange(all the products in the world :) )
        }

        //private object GetConnection()
        //{
        //    if (true)
        //    {
                
        //    }
        //}

        //private void CreateConnection() 
        //{
        //    var mongoClient = new MongoClient(MongoDBSettings.Default.MongoDBConnectionString);

        //    var mongoServer = mongoClient.GetServer();

        //    try
        //    {
        //        this.database = mongoServer.GetDatabase(MongoDBSettings.Default.MongoDBName);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new ArgumentException("Could not connect to MongoDB " + ex);
        //    }
        //}
    }
}
