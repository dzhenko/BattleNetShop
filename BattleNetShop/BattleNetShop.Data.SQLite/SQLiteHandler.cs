namespace BattleNetShop.Data.SQLite
{
    using System;
    using System.Collections.Generic;
    using System.Data.SQLite;
    using System.IO;

    public class SQLiteHandler : IDisposable
    {
        private string dbName;
        private SQLiteConnection connection;

        public SQLiteHandler()
        {
            this.dbName = SQLiteDBSettings.Default.SQLiteDBFileLocation + SQLiteDBSettings.Default.SQLiteDBName;
            if (!File.Exists(this.dbName))
            {
                SQLiteConnection.CreateFile(this.dbName);
            }

            string connectionString = "Data Source=" + this.dbName + ";Version=3;";
            this.connection = new SQLiteConnection(connectionString);
            this.connection.Open();
        }

        // Tuple<string, ICollection<Tuple<string, decimal>> will become a class
        // Task 6 input
        public ICollection<Tuple<string, float>> ReadProductTaxes()
        {
            SQLiteCommand command = new SQLiteCommand("SELECT * FROM ProductsTaxes", this.connection);
            SQLiteDataReader reader = command.ExecuteReader();

            var productsWithTaxes = new List<Tuple<string, float>>();
            using (reader)
            {
                while (reader.Read())
                {
                    productsWithTaxes.Add(new Tuple<string, float>(reader[0].ToString(), float.Parse(reader[1].ToString())));
                }
            }

            return productsWithTaxes;
        }

        // Since you need to read some reports, they have to be generated first.
        // Data can be generated by private class or by hand or however you decide. Best way is to use the 
        // library required by the teamwork specification
        public void CreateSQLiteDB()
        {
            string createTableSql = "CREATE TABLE ProductsTaxes (ProductName NVARCHAR(50), Tax REAL)";
            SQLiteCommand createTableCommand = new SQLiteCommand(createTableSql, connection);
            createTableCommand.ExecuteNonQuery();
        }

        public void SeedData()
        {
            int maxTaxAmount = 30;
            Random randomGen = new Random();
            string addCommandSql = "INSERT INTO ProductsTaxes(ProductName, Tax) VALUES(@productName, @tax)";
            SQLiteCommand command = new SQLiteCommand(addCommandSql, this.connection);
            StreamReader sr = new StreamReader(SQLiteDBSettings.Default.SQLiteDBSampleDataProducts);
            using (sr)
            {
                string productName = sr.ReadLine();
                while (productName != null)
                {
                    float tax = (float)randomGen.NextDouble() * maxTaxAmount;
                    command.Parameters.AddWithValue("@productName", productName);
                    command.Parameters.AddWithValue("@tax", tax);
                    command.ExecuteNonQuery();
                    productName = sr.ReadLine();
                }
            }
        }

        public void Dispose()
        {
            this.connection.Close();
        }
    }
}